// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CommonGrantsModelsCustomFieldType.
const (
	Array   CommonGrantsModelsCustomFieldType = "array"
	Boolean CommonGrantsModelsCustomFieldType = "boolean"
	Number  CommonGrantsModelsCustomFieldType = "number"
	Object  CommonGrantsModelsCustomFieldType = "object"
	String  CommonGrantsModelsCustomFieldType = "string"
)

// Defines values for CustomModelsOpportunityMetadataReviewStatus.
const (
	Approved CustomModelsOpportunityMetadataReviewStatus = "approved"
	InReview CustomModelsOpportunityMetadataReviewStatus = "in_review"
	Pending  CustomModelsOpportunityMetadataReviewStatus = "pending"
	Rejected CustomModelsOpportunityMetadataReviewStatus = "rejected"
	Reviewed CustomModelsOpportunityMetadataReviewStatus = "reviewed"
)

// Defines values for CustomModelsOpportunityMetadataStatus.
const (
	Closed    CustomModelsOpportunityMetadataStatus = "closed"
	Draft     CustomModelsOpportunityMetadataStatus = "draft"
	Published CustomModelsOpportunityMetadataStatus = "published"
)

// CommonGrantsModelsCurrency defines model for CommonGrants.Models.Currency.
type CommonGrantsModelsCurrency struct {
	// Amount The amount of currency
	Amount float32 `json:"amount"`

	// CurrencyCode The ISO 4217 currency code in which the amount is denominated
	CurrencyCode string `json:"currencyCode"`

	// Display How the currency amount should be displayed
	Display string `json:"display"`
}

// CommonGrantsModelsCustomField defines model for CommonGrants.Models.CustomField.
type CommonGrantsModelsCustomField struct {
	// Context Optional URL with additional information
	Context *string `json:"context,omitempty"`

	// Description Description of the custom field's purpose
	Description *string `json:"description,omitempty"`

	// Name Name of the custom field
	Name string `json:"name"`

	// Schema Link to the full JSON schema for this custom field
	Schema *string `json:"schema,omitempty"`

	// Type The JSON schema type to use when de-serializing the `value` field
	Type CommonGrantsModelsCustomFieldType `json:"type"`

	// Value Value of the custom field
	Value interface{} `json:"value"`
}

// CommonGrantsModelsCustomFieldType The set of JSON schema types supported by a custom field
type CommonGrantsModelsCustomFieldType string

// CommonGrantsModelsEvent defines model for CommonGrants.Models.Event.
type CommonGrantsModelsEvent struct {
	// Date Date of the event in in ISO 8601 format: YYYY-MM-DD
	Date CommonGrantsModelsIsoDate `json:"date"`

	// Description Detailed description of the timeline event
	Description *string `json:"description,omitempty"`

	// Name Name of the timeline event (e.g., 'Open Date', 'Deadline')
	Name string `json:"name"`

	// Time Time of the event in ISO 8601 format: HH:MM:SS
	Time *CommonGrantsModelsIsoTime `json:"time,omitempty"`
}

// CommonGrantsModelsFundingDetails defines model for CommonGrants.Models.FundingDetails.
type CommonGrantsModelsFundingDetails struct {
	EstimatedAwardCount  *int                        `json:"estimatedAwardCount,omitempty"`
	MaxAwardAmount       *CommonGrantsModelsCurrency `json:"maxAwardAmount,omitempty"`
	MaxAwardCount        *int                        `json:"maxAwardCount,omitempty"`
	MinAwardAmount       *CommonGrantsModelsCurrency `json:"minAwardAmount,omitempty"`
	MinAwardCount        *int                        `json:"minAwardCount,omitempty"`
	TotalAmountAvailable *CommonGrantsModelsCurrency `json:"totalAmountAvailable,omitempty"`
}

// CommonGrantsModelsOpportunity defines model for CommonGrants.Models.Opportunity.
type CommonGrantsModelsOpportunity struct {
	// ApplicationTimeline Key dates and milestones in the application process
	ApplicationTimeline *[]CommonGrantsModelsEvent `json:"applicationTimeline,omitempty"`

	// CustomFields Additional custom fields specific to this opportunity
	CustomFields *map[string]CommonGrantsModelsCustomField `json:"customFields,omitempty"`

	// Description Description of the opportunity's purpose and scope
	Description string `json:"description"`

	// FundingDetails Details about the funding available
	FundingDetails CommonGrantsModelsFundingDetails `json:"fundingDetails"`

	// Id Globally unique id for the opportunity
	Id CommonGrantsModelsUuid `json:"id"`

	// Source URL for the original source of the opportunity
	Source string `json:"source"`

	// Title Title or name of the funding opportunity
	Title string `json:"title"`
}

// CommonGrantsModelsIsoDate A date on a calendar in ISO 8601 format YYYY-MM-DD
type CommonGrantsModelsIsoDate = string

// CommonGrantsModelsIsoTime A time on a clock, without a timezone, in ISO 8601 format HH:mm:ss
type CommonGrantsModelsIsoTime = string

// CommonGrantsModelsUuid A universally unique identifier
type CommonGrantsModelsUuid = openapi_types.UUID

// CustomModelsCustomOpportunity A custom opportunity model extending the base opportunity
type CustomModelsCustomOpportunity struct {
	ApplicationTimeline *[]CommonGrantsModelsEvent `json:"applicationTimeline,omitempty"`

	// CustomFields Custom fields for this opportunity
	CustomFields struct {
		// FundingOpportunityNumber The funding opportunity number
		FundingOpportunityNumber CustomModelsOpportunityNumber `json:"fundingOpportunityNumber"`
	} `json:"customFields"`
	Description    string                           `json:"description"`
	FundingDetails CommonGrantsModelsFundingDetails `json:"fundingDetails"`

	// Id The base opportunity fields
	Id CommonGrantsModelsUuid `json:"id"`

	// Metadata Metadata about this opportunity
	Metadata CustomModelsOpportunityMetadata `json:"metadata"`
	Source   string                          `json:"source"`
	Title    string                          `json:"title"`
}

// CustomModelsOpportunityMetadata Metadata about an opportunity
type CustomModelsOpportunityMetadata struct {
	// ApplicationDeadline The deadline for applications
	ApplicationDeadline string `json:"applicationDeadline"`

	// LastModified When this opportunity was last modified
	LastModified string `json:"lastModified"`

	// ModifiedBy The user who last modified this opportunity
	ModifiedBy string `json:"modifiedBy"`

	// ReviewStatus The review status of this opportunity
	ReviewStatus CustomModelsOpportunityMetadataReviewStatus `json:"reviewStatus"`

	// Status The status of this opportunity
	Status CustomModelsOpportunityMetadataStatus `json:"status"`
}

// CustomModelsOpportunityMetadataReviewStatus The review status of this opportunity
type CustomModelsOpportunityMetadataReviewStatus string

// CustomModelsOpportunityMetadataStatus The status of this opportunity
type CustomModelsOpportunityMetadataStatus string

// CustomModelsOpportunityNumber defines model for CustomModels.OpportunityNumber.
type CustomModelsOpportunityNumber = CommonGrantsModelsCustomField

// OperationsUpdateJSONRequestBody defines body for OperationsUpdate for application/json ContentType.
type OperationsUpdateJSONRequestBody = CustomModelsCustomOpportunity

// CustomOpportunitiesUpdateJSONRequestBody defines body for CustomOpportunitiesUpdate for application/json ContentType.
type CustomOpportunitiesUpdateJSONRequestBody = CustomModelsCustomOpportunity

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List opportunities
	// (GET /)
	CustomOpportunitiesList(c *gin.Context)
	// List opportunities
	// (GET /api)
	OperationsList(c *gin.Context)
	// View opportunity
	// (GET /api/{id})
	OperationsRead(c *gin.Context, id string)
	// Update opportunity
	// (PUT /api/{id})
	OperationsUpdate(c *gin.Context, id string)
	// View opportunity
	// (GET /{id})
	CustomOpportunitiesRead(c *gin.Context, id string)
	// Update opportunity
	// (PUT /{id})
	CustomOpportunitiesUpdate(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CustomOpportunitiesList operation middleware
func (siw *ServerInterfaceWrapper) CustomOpportunitiesList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CustomOpportunitiesList(c)
}

// OperationsList operation middleware
func (siw *ServerInterfaceWrapper) OperationsList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OperationsList(c)
}

// OperationsRead operation middleware
func (siw *ServerInterfaceWrapper) OperationsRead(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OperationsRead(c, id)
}

// OperationsUpdate operation middleware
func (siw *ServerInterfaceWrapper) OperationsUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OperationsUpdate(c, id)
}

// CustomOpportunitiesRead operation middleware
func (siw *ServerInterfaceWrapper) CustomOpportunitiesRead(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CustomOpportunitiesRead(c, id)
}

// CustomOpportunitiesUpdate operation middleware
func (siw *ServerInterfaceWrapper) CustomOpportunitiesUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CustomOpportunitiesUpdate(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.CustomOpportunitiesList)
	router.GET(options.BaseURL+"/api", wrapper.OperationsList)
	router.GET(options.BaseURL+"/api/:id", wrapper.OperationsRead)
	router.PUT(options.BaseURL+"/api/:id", wrapper.OperationsUpdate)
	router.GET(options.BaseURL+"/:id", wrapper.CustomOpportunitiesRead)
	router.PUT(options.BaseURL+"/:id", wrapper.CustomOpportunitiesUpdate)
}

type CustomOpportunitiesListRequestObject struct {
}

type CustomOpportunitiesListResponseObject interface {
	VisitCustomOpportunitiesListResponse(w http.ResponseWriter) error
}

type CustomOpportunitiesList200JSONResponse []CommonGrantsModelsOpportunity

func (response CustomOpportunitiesList200JSONResponse) VisitCustomOpportunitiesListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OperationsListRequestObject struct {
}

type OperationsListResponseObject interface {
	VisitOperationsListResponse(w http.ResponseWriter) error
}

type OperationsList200JSONResponse []CommonGrantsModelsOpportunity

func (response OperationsList200JSONResponse) VisitOperationsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OperationsReadRequestObject struct {
	Id string `json:"id"`
}

type OperationsReadResponseObject interface {
	VisitOperationsReadResponse(w http.ResponseWriter) error
}

type OperationsRead200JSONResponse CustomModelsCustomOpportunity

func (response OperationsRead200JSONResponse) VisitOperationsReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OperationsUpdateRequestObject struct {
	Id   string `json:"id"`
	Body *OperationsUpdateJSONRequestBody
}

type OperationsUpdateResponseObject interface {
	VisitOperationsUpdateResponse(w http.ResponseWriter) error
}

type OperationsUpdate200JSONResponse CustomModelsCustomOpportunity

func (response OperationsUpdate200JSONResponse) VisitOperationsUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CustomOpportunitiesReadRequestObject struct {
	Id string `json:"id"`
}

type CustomOpportunitiesReadResponseObject interface {
	VisitCustomOpportunitiesReadResponse(w http.ResponseWriter) error
}

type CustomOpportunitiesRead200JSONResponse CustomModelsCustomOpportunity

func (response CustomOpportunitiesRead200JSONResponse) VisitCustomOpportunitiesReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CustomOpportunitiesUpdateRequestObject struct {
	Id   string `json:"id"`
	Body *CustomOpportunitiesUpdateJSONRequestBody
}

type CustomOpportunitiesUpdateResponseObject interface {
	VisitCustomOpportunitiesUpdateResponse(w http.ResponseWriter) error
}

type CustomOpportunitiesUpdate200JSONResponse CustomModelsCustomOpportunity

func (response CustomOpportunitiesUpdate200JSONResponse) VisitCustomOpportunitiesUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List opportunities
	// (GET /)
	CustomOpportunitiesList(ctx context.Context, request CustomOpportunitiesListRequestObject) (CustomOpportunitiesListResponseObject, error)
	// List opportunities
	// (GET /api)
	OperationsList(ctx context.Context, request OperationsListRequestObject) (OperationsListResponseObject, error)
	// View opportunity
	// (GET /api/{id})
	OperationsRead(ctx context.Context, request OperationsReadRequestObject) (OperationsReadResponseObject, error)
	// Update opportunity
	// (PUT /api/{id})
	OperationsUpdate(ctx context.Context, request OperationsUpdateRequestObject) (OperationsUpdateResponseObject, error)
	// View opportunity
	// (GET /{id})
	CustomOpportunitiesRead(ctx context.Context, request CustomOpportunitiesReadRequestObject) (CustomOpportunitiesReadResponseObject, error)
	// Update opportunity
	// (PUT /{id})
	CustomOpportunitiesUpdate(ctx context.Context, request CustomOpportunitiesUpdateRequestObject) (CustomOpportunitiesUpdateResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CustomOpportunitiesList operation middleware
func (sh *strictHandler) CustomOpportunitiesList(ctx *gin.Context) {
	var request CustomOpportunitiesListRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CustomOpportunitiesList(ctx, request.(CustomOpportunitiesListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CustomOpportunitiesList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CustomOpportunitiesListResponseObject); ok {
		if err := validResponse.VisitCustomOpportunitiesListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OperationsList operation middleware
func (sh *strictHandler) OperationsList(ctx *gin.Context) {
	var request OperationsListRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OperationsList(ctx, request.(OperationsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OperationsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OperationsListResponseObject); ok {
		if err := validResponse.VisitOperationsListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OperationsRead operation middleware
func (sh *strictHandler) OperationsRead(ctx *gin.Context, id string) {
	var request OperationsReadRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OperationsRead(ctx, request.(OperationsReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OperationsRead")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OperationsReadResponseObject); ok {
		if err := validResponse.VisitOperationsReadResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OperationsUpdate operation middleware
func (sh *strictHandler) OperationsUpdate(ctx *gin.Context, id string) {
	var request OperationsUpdateRequestObject

	request.Id = id

	var body OperationsUpdateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OperationsUpdate(ctx, request.(OperationsUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OperationsUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OperationsUpdateResponseObject); ok {
		if err := validResponse.VisitOperationsUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CustomOpportunitiesRead operation middleware
func (sh *strictHandler) CustomOpportunitiesRead(ctx *gin.Context, id string) {
	var request CustomOpportunitiesReadRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CustomOpportunitiesRead(ctx, request.(CustomOpportunitiesReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CustomOpportunitiesRead")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CustomOpportunitiesReadResponseObject); ok {
		if err := validResponse.VisitCustomOpportunitiesReadResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CustomOpportunitiesUpdate operation middleware
func (sh *strictHandler) CustomOpportunitiesUpdate(ctx *gin.Context, id string) {
	var request CustomOpportunitiesUpdateRequestObject

	request.Id = id

	var body CustomOpportunitiesUpdateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CustomOpportunitiesUpdate(ctx, request.(CustomOpportunitiesUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CustomOpportunitiesUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CustomOpportunitiesUpdateResponseObject); ok {
		if err := validResponse.VisitCustomOpportunitiesUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaf2/bOBL9KgSvQHYBOZZzdprqPze5bXrXNMUm3UOxCG5pcWxzlyJVknLqBv7uB5KS",
	"9Ytx3KRdYLHdPxaORM0M38y8eZR6h1OZ5VKAMBond1inS8iI+3kqs0yKV4oIow8vJAWuD08LpUCka3sf",
	"PpEs52B/kkwWwuBkMIkPJxFOy1WnkgJO8PurMxxhynTOyRon+Idndln8I95EOFcyB2UY6KadO0xBp4rl",
	"hkmBE3y9BOTvITlHlXkcYbPOrQdRZDNQ1l7bdcjO66tLND4aPd+aQamkgJhAt0uWLpGpfTGNKAiZMUEM",
	"0NqdNoqJhXW33VTX07m8dZa2TkqTeikLTtEMUPloyO4mwgo+FkwBxcmvFSq1t842b7YG5Ox3SI0NLJw8",
	"bWT2EwNOO/nroLTOQVuggbMFm3FAUi2IYJ+JXaBxhAXJrDt/n3Fm1vaZeiNEKRfmivAC7BaEFLmSc2Z3",
	"QVJCIWMpvunlP5XCwKdAAVy6H4Sj9z+/QbfMLBGhlJXXmJhLlbngcIT9b5zgQrFgypqGu37O6r8sAD6D",
	"FjU0t7AdaJQXKpcaQpY9Kl2Tb0kGIVshC777+jbeMPEHMtLZmBeco39fXb5FfjWaS4XMkumu9YeA8Bfu",
	"MOH8co6TX+/wMwVznOB/DGtOGJaEMHygoFz+NzdRoOGasVqfdiOFBnS7BIEoDDQoRjj7zMTCbfA3VzW/",
	"lfvYbKuoC8ov9nIQ2W4DucSUG67MPaJprkvA+lvU4Iipu1ONdJHnUhmgaLZGpJshEEVm4ytzElU8FuGZ",
	"lByILecyuqjsqZtAIkNh/2sFnkibXU6MffAoPhoP4tFgNMHddE3znLPUtzmawYIJNAObF5KmkHsOLHv/",
	"MgeBzqzFXhd7P08pLKalN90rKHu5yjnYPVriZsKx+slxPEK+6hP04cOHD4OLi8HZ2R5NbwjjQBHtd79h",
	"GXAmSmeP6/q2DfQDHC4OI3SwRfAgQgdnQKhdc/BjsFVZ9nREr62RQIuyrI9oD87z8+TiIrm6uq+3XM73",
	"7amfCkGZWHjcdadKQRuW2Xk7vSWKnnpBMIojbKQhfOpm4XRFGCeztvgYxe6/B+XHs1Fkl8Vx7DbTrt2g",
	"97tqW0wYWHihkZFPbsl0K1m+nD1LGdOwtsshE1/TYWlth8P78H68282e9XHpSLMQzKx3CpUrz66WoHRG",
	"OEezQjMBWiMmhFw5HkO5ktaXlS3zft39ycXGKE7wZBLDyTiOB3D0YjYYj+h4QJ6Pjgfj8fHxZDIex3E8",
	"whHWslCptbk0JtfJcLjwIC3kaihrhIbjybHlDGZshPjKAfGyAuJ1DYTDOKC5a86/Lomqj/R/YI1si2tE",
	"BEUZ46CNFGCB9oK5NmIBT0FbvJmBTD+mZPz02nT0pJP322nsg9+qwHetTT1ByfTGBZ7WUrM5wDXSOaRs",
	"zlIvzZhGjbTgQK1/qfRsmKuVp8uATmUe1KD9En/8zOjQdGAY+zuIzGRhSnHqHkFk2zNl0T8ljqJgNOD9",
	"FZczwvkaFYJ9LAAxWkrhFnBOVped1IXcHia2jyi2YDbFfnEgBftIat+EPYloLyOpkGioggqqYM3ccxJk",
	"tOaFylsbll4F7DuTK8nVC37qGh9JYfUr4SAoUQGJ0BRcUU3ZVm1OrNp0lLbFzwmaPaVsJV0CkRmnXVxk",
	"XKZ/RO5oaGuRuFufpYAoFOv5eZJlieOoOtLR8ySOkzh+bJyuTANBFoKtQOl2qYIwbM6c1q8j+GdMRkcw",
	"gcHkxTgejNP4ZPDiaJQORs/JyYvjeJ7Ox7NWFRYseIz0bNaits5I7cZY8lqjFlFmH0fwyYCvU1uzM6K7",
	"LbHXMPn2g6C9odMWTW8PyLsiL9umgdNbfxjbn7qaqPfthA/HARZA1dusTvPfG+HNw6Nmjznx1OnwzXj+",
	"OlB4ZWqdkgVDKDHk6Ym6qCz1Y6hubUddp5paQ+b+sfDV2b2x/U5PBHn/oY33GqmzbyL27f7qPBt+X0LL",
	"u641G0/pEJtxos2FpJYuA/z63yWIXj7QLdHIPmdZzD8YMFzde7kOR1loUOh2KduWdii92rSCFYPbK0NM",
	"ocPG/Qqk3RKvCXpmq/dDuadgq6jF//yDuPLhtkbyXMmV+6nAZhto8E2R3hHQXpFQRebG5r2YcaaXzmPK",
	"pQ7665R3K48t9LeBRcES6sD5JZX9xRz+0NmgxwzTXRTeezPWZuUKVVdsXWXgewMt2ApEu7aZWbKy5qfv",
	"XgcTXb2UqjyUZI0a0KDe9Oi/Gu68oAwt3b6crWXM9OXpwMs+J/p2V0Xo3Wwb436+3UlazOW9g5/ZSDIQ",
	"hjSPUz65/hys0TsljUwldxjW5+fSQrnI37PyzdsfHcaHsd22zEGQnFnR5i5FOCdm6ZI8tP9bQOArxiuw",
	"ypQz7d4W1zm11eFMKhfva7qN47K55g3TxjWDzqXQvqKO4nj74cS/yGl00PB37Qut/q7waCV22Z52bT22",
	"2URBivtYgDZoSTTSRZoCUKCHrgJ0kWVErd2nDYtGCwq7YOjA/Qo4XlZ//W3gi7AhC217q1U9+KbCdXjH",
	"6OZecH+xY8m4Ie1P9/fw0A6kfwZCXUcokoEBpR3vMmvddkn9EYH5iVWxgVEFND+CdZnj5onZ21sU9s9M",
	"T8mRQ7QjGO7JkJ2sgZy8z90ZPJCFA13laUc+/OPfLCMOgpeSrv/UZLSD3Pw1S6NM7H7FYdv327RuYNh8",
	"7+HdPfxVWzWA//ee/Qv1rDOnQa2qLHX++YZMCUcUVsBlbmUp8mtxhAvFyy88yXDI7bql1CY5iU9id9go",
	"ueCu/uzeUko3m/8HAAD//1Mn4+HBJQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
